class 오류(Exception): # 으로 사용자 정의 오류을 정의 할수있다.
    pass

try: # 으로 이안에 있는거에 만약 오류가발생하면
    class 간단계산기:
        def __init__(self):
            첫번째 = int((input("첫번째 수를 입력해주세요.")))
            기호 = int((input("기호를 입력해주세요.(숫자로 입력) 1 = (더하기) 2 = (빼기) 3 = (곱하기) 4 = (나누기)")))
            두번째 = int((input("두번째 수를 입력해주세요.")))
            if 첫번째 > 1000000000000000 or 두번째 > 1000000000000000:
                raise 오류 # raise 오류종류 으로 오류를 의도적으로 발생시킬수있다.
            if 기호 == 1:
                결과 = (첫번째 + 두번째)
                기호 = "더하기"
            elif 기호 == 2:
                결과 = (첫번째 - 두번째)
                기호 = "빼기"
            elif 기호 == 3:
                결과 = (첫번째 * 두번째)
                기호 = "곱하기"
            elif 기호 == 4:
                결과 = (첫번째 / 두번째)
                기호 = "나누기"
            print("{0} {1} {2} 의 계산결과는 {3}입니다.\n".format(첫번째, 기호, 두번째, 결과))
    계산1 = 간단계산기()
    계산2 = 간단계산기()
    계산3 = 간단계산기()
except ValueError: # int전용 아래있는 것을 실행한다. (그리고 코드는 정상작동)
    print("수를 잘못 입력하셨습니다.")
except ZeroDivisionError: # as err 을 뒤에 입력한뒤 print(err)을 입력하면 오류문구가 그대로나온다.
    print("리스트에서 오류가 생길시 출력됨")
except 오류:
    print("최대 열 다섯 자리수까지 입니다.")
except: # 어느 곳에서 든 오류가 생길시 실행
    print("404 err")
finally: # 무적건 try코드가 끝나고 실행되는 코드 진짜 오류가 나타나도 실행되고 끝
    print("의도적이든 아니든 오류를 발생 안 시켜주셔서 감사합니다.")