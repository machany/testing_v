# from _typeshed import self
# from _typeshed import Self

유닛1 = "검사"
유닛1체력 = 100
유닛1공격력 = 10
유닛1방어력 = 5
유닛1가격 = 1000
돈 = 100000

print("{0}의 정보\n체력:{1} 공격력:{2} 방어력:{3}       가격:{4}"\
    .format(유닛1, 유닛1체력, 유닛1공격력, 유닛1방어력, 유닛1가격))
대답 = input("구매하겠습니까? (y/n)")
if 대답 == "y":
    print("{0}이(가) 소환 되었습니다.".format(유닛1))
    print("현재 돈에서 {0}원이 차감되었습니다.".format(유닛1가격))
    돈 -= 유닛1가격
    print("현재 돈은 {0}원이 남았습니다.\n".format(돈))
elif 대답 == "n":
    print("구매가 취소 되었습니다.\n")
else:
    print("알아 들을수 없는 대답\n")

유닛2 = "머스킷 병"
유닛2체력 = 70
유닛2공격력 = 20
유닛2방어력 = 2
유닛2가격 = 1500

print("{0}의 정보\n체력:{1} 공격력:{2} 방어력:{3}       가격:{4}"\
    .format(유닛2, 유닛2체력, 유닛2공격력, 유닛2방어력, 유닛2가격))
대답 = input("구매하겠습니까? (y/n)")
if 대답 == "y":
    print("{0}이(가) 소환 되었습니다.".format(유닛2))
    print("현재 돈에서 {0}원이 차감되었습니다.".format(유닛2가격))
    돈 -= 유닛2가격
    print("현재 돈은 {0}원이 남았습니다.\n".format(돈))
elif 대답 == "n":
    print("구매가 취소 되었습니다.\n")
else:
    print("알아 들을수 없는 대답\n")

class 유닛: # class 클레스이름 으로 정의 함수와 비슷하다.
    def __init__(self, 유닛명, 유닛체력, 유닛공격력, 유닛방어력, 유닛속도, 유닛가격):
        global 돈
        self.유닛명 = 유닛명 # self로 같은 클래스내의 다른함수에서도 이 변수를 사용할수있다.
        self.유닛체력 = 유닛체력
        self.유닛공격력 = 유닛공격력
        self.유닛방어력 = 유닛방어력
        self.유닛가격 = 유닛가격
        self.유닛속도 = 유닛속도
        print("{0}의 정보\n체력:{1} 공격력:{2} 방어력:{3} 속도:{4}       가격:{5}"\
            .format(유닛명, 유닛체력, 유닛공격력, 유닛방어력, 유닛속도, 유닛가격))
        대답 = input("구매하겠습니까? (y/n)")
        if 대답 == "y":
            if 돈 >= 유닛가격:
                print("{0}이(가) 소환 되었습니다.".format(유닛명))
                print("현재 돈에서 {0}원이 차감되었습니다.".format(유닛가격))
                돈 -= 유닛2가격
                print("현재 돈은 {0}원이 남았습니다.\n".format(돈))
            else:
                print("{0}원이 필요하나 현재 돈이 {1}원 남아있습니다.\n".format(유닛가격, 돈))
        elif 대답 == "n":
             print("구매가 취소 되었습니다.\n")
        else:
            print("알아 들을수 없는 대답\n")
        
    def 이동(self):
        방향 = input("이동방향을 정하세요.")
        if 방향 == "북" or 방향 == "북동" or 방향 == "동" or 방향 == "남동" or \
            방향 == "남" or 방향 == "남서" or 방향 == "서" or 방향 == "북서":
            print("{0}:{1}방향으로 이동합니다. [속도:{2}]\n".format(self.유닛명, 방향, self.유닛속도))
        else:
            print("알아 들을수 없는 대답\n")
유닛1n1 = 유닛("검사", 100, 10, 5, 2, 1000) # 한개의 클래스에서 생성된 것들을 객채라고 한다.
유닛1n2 = 유닛("검사", 100, 10, 5, 2, 1000) # __init__를 사용하면 self를 제외하고 똑같이 보내야 실행된다.
유닛2n1 = 유닛("머스킷 병", 70, 20, 2, 2, 1500)
유닛1n3 = 유닛("검사", 100, 10, 5, 2, 1000)
유닛2n2 = 유닛("머스킷 병", 70, 20, 2, 2, 1500)
유닛1n4 = 유닛("검사", 100, 10, 5, 2, 1000)
유닛1n5 = 유닛("검사", 100, 10, 5, 2, 1000)
유닛2n3 = 유닛("머스킷 병", 70, 20, 2, 2, 1500)
유닛3n1 = 유닛("암살자", 40, 40, 1, 3, 2500)
유닛3n2 = 유닛("암살자", 40, 40, 1, 3, 2500)

대답 = input("암살자1을 은신 시키겠습니까? (y/n)")
if 대답 == "y":
    유닛3n1.은신 = True # 도중 객체에 변수를 추가시킬수있다.
elif 대답 == "n":
    유닛3n1.은신 = False
else:
    print("알아 들을수 없는 대답\n")
if 유닛3n1.은신 == True:
    print("암살자1은 현재 은신중입니다.")
elif 유닛3n1.은신 == False:
    print("암살자1은 현재 은신중이 아닙니다.")

대답 = input("암살자2을 은신 시키겠습니까? (y/n)")
if 대답 == "y":
    유닛3n2.은신 = True
elif 대답 == "n":
    유닛3n2.은신 = False
else:
    print("알아 들을수 없는 대답\n")
if 유닛3n2.은신 == True:
    print("암살자2은 현재 은신중입니다.")
elif 유닛3n2.은신 == False:
    print("암살자2은 현재 은신중이 아닙니다.")
class 공격유닛(유닛): # 새클래스(기존클래스)로 기존클래스의 내용을 새 클래스로 상속 받을수있다.
    def __init__(self, 유닛명, 유닛체력, 유닛공격력, 유닛방어력, 유닛속도):
        # 유닛.__init__(self, 유닛명, 유닛체력, 유닛공격력, 유닛방어력, 유닛속도) # 으로 상속 가능
        # 상속받을때 ^^같이 쓰지않고 super().__init__(상속받을 변수)를 적어 상속받을수있고 self는 꼭 빼야한다.
        # 단 super는 다중상속(뒤에 나옴)때 맨 앞에있는  클래스정보만 가져온다.
        self.유닛명 = 유닛명 # 이 프로잭트는 무슨 이유인진 몰라도 상속을 하면 오류가 발생한다.
        self.유닛체력 = 유닛체력 # __init__를 아직 만들지 못했다면 pass로 넘어갈수있다.
        self.유닛공격력 = 유닛공격력
        self.유닛방어력 = 유닛방어력
        self.유닛속도 = 유닛속도
    def 공격(self, 방향):
        print("{0}:{1}방향으로 공격합니다. [공격력:{2}]".format(self.유닛명, 방향, \
            self.유닛공격력))
    def 공격받음(self, 유닛데미지):
        유닛데미지 -= (self.유닛방어력 * 2)
        if 유닛데미지 <= 0:
            유닛데미지 = 0
        self.유닛체력 -= 유닛데미지
        if self.유닛체력 <= 0:
            print("{0}:파괴 되었습니다.\n".format(self.유닛명))
        else:
            print("{0}:{1}데미지를 입었습니다.\n".format(self.유닛명, 유닛데미지))
            print("{0}:현재 체력:{1}\n".format(self.유닛명, self.유닛체력))
유닛3n2 = 공격유닛("암살자", 40, 40, 1, 3)
유닛2n1 = 공격유닛("머스킷 병", 70, 20, 2, 2)
유닛3n2.공격("북동")
유닛2n1.공격받음(40)
유닛3n2.공격("북동")
유닛2n1.공격받음(40)
class 비행유닛(유닛):
    def __init__(self, 유닛명, 유닛체력, 유닛방어력, 비행속도):
        self.유닛명 = 유닛명
        self.유닛체력 = 유닛체력
        self.유닛방어력 = 유닛방어력
        self.비행속도 = 비행속도
    def 비행(self, 방향):
        print("{0}:{1}방향으로 날아갑니다. [속도:{2}]".format(self.유닛명, 방향, \
            self.비행속도))

class 비행공격유닛(공격유닛, 비행유닛):
    def __init__(self, 유닛명, 유닛체력, 유닛공격력, 유닛방어력, 비행속도):
        공격유닛.__init__(self, 유닛명, 유닛체력, 유닛공격력, 유닛방어력)
        비행유닛.__init__(self, 비행속도)
훈련된매 = 공격유닛("훈련된매", 10, 25, 0, 0)
훈련된매 = 비행유닛("훈련된매", 10, 0, 4)
훈련된매.비행("남")
유닛3n2.이동()